#!/bin/bash
##=======================  ramroot (runtime hook)  =======================##
# Place in: /usr/lib/initcpio/hooks/

run_hook() {
    # root (and boot) UUID
    bootUUID=''
    rootUUID=''
    # ramroot prompt:
    promptDefault='yes'
    promptTimeout=15
    # options:
    fstabMount='false'
    issueRAM='false'

    # wait for output from other init processes:
    sleep 4

    # detect available RAM:
    ramM=`free --mega | awk '/Mem/ {print int($2)}'`
    ramG=$(( $ramM / 1000 ))

    # mount root partition to /local_root:
    poll_device "/dev/disk/by-uuid/${rootUUID}" 20
    mount -U "${rootUUID}" /local_root
    # get size of /local_root:
    rootM=`df -BM /local_root/ | awk 'FNR==2 {print int($3)}'`

    # mount boot partition (if exists) to /local_boot:
    if [ -n "$bootUUID" ]; then
        poll_device "/dev/disk/by-uuid/${bootUUID}" 20
        mount -U "${bootUUID}" /local_boot
        # add size of /local_boot:
        rootM=$(( $rootM + `df -BM /local_boot/ | \
            awk 'FNR==2 {print int($3)}'` ))
    fi

    # check and print available memory:
    echo ":: Total RAM available  : ${ramM}M"
    echo ":: Root filesystem size : ${rootM}M"
    diffM=$(( $ramM - $rootM ))
    if [ $diffM -lt 500 ]; then
        echo ":! Not enough RAM available."
        inputYN='n'

    # prompt [Y/n] to load filesystem to RAM:
    elif [ "$promptDefault" = 'yes' ]; then
        echo -n ">: Load root filesystem to RAM? [Y/n] "
        inputYN='y'
        read -s -r -t $promptTimeout -n 1 inputYN
        if [ "${inputYN}" = 'n' ] || [ "${inputYN}" = 'N' ] || \
        [ "${inputYN}" = 'q' ] || [ "${inputYN}" = 'Q' ]; then
            inputYN='n'
        else
            inputYN='y'
        fi
    # prompt [y/N] to load filesystem to RAM:
    else
        echo -n ">: Load root filesystem to RAM? [y/N] "
        inputYN='n'
        read -s -r -t $promptTimeout -n 1 inputYN
        if [ "${inputYN}" = 'y' ] || [ "${inputYN}" = 'Y' ]; then
            inputYN='y'
        else
            inputYN='n'
        fi
    fi

    # copy root filesystem to RAM:
    if [ "${inputYN}" = 'y' ]; then
        echo "yes"
        echo ":: Copying root filesystem to RAM..."
        # enable zRAM devices:
        if [ ! -b "/dev/zram0" ]; then
            modprobe zram num_devices=$(nproc)
        fi

        # make zRAM partition using half of available free RAM (max +6G)
        addM=$(( $diffM / 2 ))
        if [ $addM -gt 6000 ]; then
            addM=6000
        else
            addM=$(( $diffM / 2 ))
        fi
        zramM=$(( $rootM + $addM ))
        zdevice=$(zramctl -f -s "${zramM}M" -a lzo -t $(nproc))
        mkfs.ext4 -q "$zdevice"

        # mount zRAM partition to /zram_root:
        mount "$zdevice" /zram_root
        export zdevice
        # copy files from local root to zRAM root:
        cp -a /local_root/* /zram_root/

        # move /etc/fstab from to /etc/fstab~ in zRAM root:
        mv /zram_root/etc/fstab /zram_root/etc/fstab~
        # use other mount points from /etc/fstab normally:
        if [ "$fstabMount" = 'true' ]; then
            sed 's@\(.* /boot .*\)@#\1@g; s@\(.* / .*\)@#\1@g;' \
                /zram_root/etc/fstab~ > /zram_root/etc/fstab
        fi
        # use custom /etc/issue file:
        if [ "$issueRAM" = 'true' ] &&
        [ -f /zram_root/usr/lib/ramroot/etc/issue ]; then
            if [ -f /zram_root/etc/issue ]; then
                mv /zram_root/etc/issue /zram_root/etc/issue~
            fi
            cp /zram_root/usr/lib/ramroot/etc/issue /zram_root/etc/issue
            chmod +x /zram_root/etc/issue
        fi

        # copy files from local boot partition (if exists) to zRAM boot:
        if [ -n "$bootUUID" ]; then
            mkdir -p /zram_root/boot
            cp -a /local_boot/* /zram_root/boot/
        fi
        # unmount zRAM root:
        umount /zram_root
        # set new mount_handler to use zRAM device:
        oroot_mount() {
            mount "$zdevice" "$1"
        }
        # don't perform filesystem check on new zRAM partition:
        fsck_root() {
            :
        }
        mount_handler=oroot_mount

    # keep root filesystem on local device:
    else
        echo "no"
        echo ":: Keeping root filesystem on local device..."
    fi

    # unmount /local_root and /local_boot:
    umount /local_root
    if [ -n "$bootUUID" ]; then
        umount /local_boot
    fi
}
