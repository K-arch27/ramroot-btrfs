#!/bin/bash
##=====================  ramroot (runtime hook)  =====================##
# Place in: /usr/lib/initcpio/hooks/

run_hook() {
    
    #ROOT_UUID=
    RAMROOT_MOUNTS=()
    LOCAL_MOUNTS=()
    PROMPT_DEFAULT=no
    PROMPT_TIMEOUT=5
    
    # root (and boot) UUID
    UUID_BOOT=''
    UUID_ROOT=''
    # ramroot prompt:
    LOAD_DEFAULT='yes'
    LOAD_TIMEOUT=15


    # wait for output from other init processes:
    sleep 4

    # detect available RAM:
    RAM_M=`free --mega | awk '/Mem/ {print int($2)}'`
    RAM_G=$(( $RAM_M / 1000 ))

    # mount root partition to /local_root:
    poll_device "/dev/disk/by-uuid/$UUID_ROOT" 20
    mount -U "$UUID_ROOT" /local_root
    # get size of /local_root:
    ROOT_M=`df -BM /local_root/ | awk 'FNR==2 {print int($3)}'`

    # mount boot partition (if exists) to /local_boot:
    if [ -n "$UUID_BOOT" ]; then
        poll_device "/dev/disk/by-uuid/$UUID_BOOT" 20
        mount -U "$UUID_BOOT" /local_boot
        # add size of /local_boot:
        ROOT_M=$(( $ROOT_M + `df -BM /local_boot/ | \
            awk 'FNR==2 {print int($3)}'` ))
    fi

    # check and print available memory:
    echo ":: Total RAM available  : ${RAM_M}M"
    echo ":: Root filesystem size : ${ROOT_M}M"
    RAM_EXTRA_M=$(( $RAM_M - $ROOT_M ))
    if [ $RAM_EXTRA_M -lt 500 ]; then
        echo ":! Not enough RAM available."
        INPUT='n'

    # prompt [Y/n] to load filesystem to RAM:
    elif [ "$LOAD_DEFAULT" = 'yes' ]; then
        echo -n ">: Load root filesystem to RAM? [Y/n] "
        INPUT='y'
        read -s -r -t $LOAD_TIMEOUT -n 1 INPUT
        if [ "$INPUT" = 'n' ] || [ "$INPUT" = 'N' ] ||
        [ "$INPUT" = 'q' ] || [ "INPUT" = 'Q' ]; then
            INPUT='n'
        else
            INPUT='y'
        fi


    # prompt [y/N] to load filesystem to RAM:
    else
        echo -n ">: Load root filesystem to RAM? [y/N] "
        INPUT='n'
        read -s -r -t $LOAD_TIMEOUT -n 1 INPUT
        if [ "$INPUT" = 'y' ] || [ "INPUT" = 'Y' ] ; then
            INPUT='y'
        else
            INPUT='n'
        fi
    fi

    # copy root filesystem to RAM:
    if [ "$INPUT" = 'y' ]; then
        echo "yes"
        echo ":: Copying root filesystem to RAM..."

        # enable zRAM devices:
        if [ ! -b "/dev/zram0" ]; then
            modprobe zram num_devices=$(nproc)
        fi

        # make zRAM partition using half of available free RAM (max +6G)
        ROOT_ADD_M=$(( $RAM_EXTRA_M / 2 ))
        if [ $ROOT_ADD_M -gt 6000 ]; then
            ROOT_ADD_M=6000
        fi
        ZRAM_M=$(( $ROOT_M + $ROOT_ADD_M ))
        ZRAM_DEVICE=$(zramctl -f -s "${ZRAM_M}M" -a lzo -t $(nproc))
        mkfs.ext4 -q "$ZRAM_DEVICE"

    # copy root:

        # mount zRAM partition to /zram_root:
        mount "$ZRAM_DEVICE" /zram_root
        export ZRAM_DEVICE
        # copy files from local root to zRAM root:
        cp -a /local_root/* /zram_root/


        # move /etc/fstab from to /etc/fstab~ in zRAM root:
        if [ -f /zram_root/etc/fstab ]; then
            mv /zram_root/etc/fstab /zram_root/etc/fstab~
        fi
        
        
        
        # use custom /etc/issue file:
        if [ "$FLAG_ISSUE" = 'true' ] &&
        [ -f /zram_root/usr/lib/ramroot/etc/issue ]; then
            if [ -f /zram_root/etc/issue ]; then
                mv /zram_root/etc/issue /zram_root/etc/issue~
            fi
            cp /zram_root/usr/lib/ramroot/etc/issue /zram_root/etc/issue
        fi

    # copy other partitions:

        # copy files from local boot partition (if exists) to zRAM boot:
        if [ -n "$UUID_BOOT" ]; then
            mkdir -p /zram_root/boot
            cp -a /local_boot/* /zram_root/boot/
        fi
        
        
        
        
        # unmount zRAM root:
        umount /zram_root
        # set new mount_handler to use zRAM device:
        oroot_mount() {
            mount "$ZRAM_DEVICE" "$1"
        }
        # don't perform filesystem check on new zRAM partition:
        fsck_root() {
            :
        }
        mount_handler=oroot_mount

    # keep root filesystem on local device:
    else
        echo "no"
        echo ":: Keeping root filesystem on local device..."
    fi

    # unmount /local_root and /local_boot:
    umount /local_root
    if [ -n "$UUID_BOOT" ]; then
        umount /local_boot
    fi
}
