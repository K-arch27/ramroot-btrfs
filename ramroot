#!/bin/bash
##============================  ramroot  =============================##
# Copyright (C) 2019 Chris Magyar        GNU General Public License v3 #
##====================================================================##
VERSION="1.2.0"

print_help() {
cat <<'HELPDOC'
NAME
    ramroot - load root filesystem entirely to RAM during boot

SYNOPSIS
    ramroot [OPTIONS]

DESCRIPTION
    This script generates build and runtime initramfs hooks that
    allow the root filesystem and any other physical partitions to
    be loaded directly into RAM during early userspace.

OPTIONS
    -c, --config <CONFIG FILE>

    -C, --config-gen
        Generate a new config file.

    -D, --disable
        Remove hooks from mkinitcpio.conf anf rebuild linux boot image.

    --dryrun
        Copy generated build and runtime initramfs hooks and updated
        mkinitcpio.conf to cache directory only.

    -E, --enable
        Generate build and runtime initramfs hooks.  Add hooks
        to mkinicpio.conf and rebuild linux boot image.

    -S, --status
        Display ramroot status.

    -h, --help
        Display help text and exit.

FILES
    /etc/ramroot.conf
        This is the primary ramroot config file.  Edit to add or
        remove mounts, change default boot prompt behavior, and
        set memory requirements for booting from RAM.  When making
        changes to this file, you must re-enable ramroot (--enable)
        for the changes to take effect.

    /etc/ramroot/
        The contents of this directory replicates the hierarchy of
        the root file system.  Files here are copied to the root
        file system when boot from RAM.  This can be used to copy or
        overwrite scripts and other files when boot from RAM.

    /usr/lib/ramroot/
        Default ramroot config file and template hook files.

    ~/.cache/ramroot/
        Generated hook files and updated mkinitcpio.conf.

VERSION
HELPDOC
if [ -n "$VERSION" ]; then
    printf '\nVERSION\n    %s\n' "$VERSION"
fi
}

##===========================  VARIABLES  ============================##
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

#### replace all this shit with a config file: ####
# default variables:
DIR_CACHE="$HOME/.cache/ramroot"
DIR_BUILD='/tmp/ramroot'
FLAG_CACHE='false'
LOAD_TIMEOUT_DEFAULT=15
# script variables (do not change):
UUID_ROOT=
UUID_BOOT=
ACTION='none'
DIR_HOOKS='/usr/lib/initcpio/hooks'
DIR_INSTALL='/usr/lib/initcpio/install'
DIR_LIB='/usr/lib/ramroot'
DIR_SCRIPT=
HOOK_BUILD="$DIR_LIB/install/ramroot"
HOOK_RUNTIME="$DIR_LIB/hooks/ramroot"
FLAG_INCOGNITO='false'
INIT_MODULES=
INIT_HOOKS=
EXIT_STATUS=0
LOAD_TIMEOUT=$LOAD_TIMEOUT_DEFAULT
LOAD_DEFAULT='yes'
#### replace all this shit with a config file: ####

# flag args:
FLAG_CONFIG_GEN='false'
FLAG_DISABLE='false'
FLAG_DRYRUN='false'
FLAG_ENABLE='false'
FLAG_STATUS='false'

# basic colors:
C_BLACK=$'\e[0;30m'
C_BLUE_B=$'\e[1;38;5;27m'
C_GREEN_B=$'\e[1;38;5;46m'
C_RED_B=$'\e[1;38;5;196m'
C_YELLOW_B=$'\e[1;33m'
C_WHITE=$'\e[0;38;5;15m'
C_WHITE_B=$'\e[1;37m'
C_GRAY=$'\e[0;37m'

##===========================  FUNCTIONS  ============================##
args_parse() {
# parse all input arguments $@:
    local ARGS=( "$@" )
    local ARGS_N=0
    local ARG="${ARGS[ARGS_N]}"
    local FLAG_ARG_EMPTY='false'
    local FLAG_ARG_UNKNOWN='false'
    local FLAG_HELP='false'
    while [ -n "$ARG" ]; do case "$ARG" in
        # flag args:
        -A|--A-long)
            FLAG_A='true'
            ARG="${ARGS[((++ARGS_N))]}"
            ((COUNT_FLAG++)) ;;
        -B|--B-long)
            FLAG_B='true'
            ARG="${ARGS[((++ARGS_N))]}"
            ((COUNT_FLAG++)) ;;
        # option args:
        -x|--x-long)
            ARG_X="${ARGS[((++ARGS_N))]}"
            if [ -z "${ARGS[ARGS_N]}" ]; then
                FLAG_ARG_EMPTY='true'
                break
            fi
            ARG="${ARGS[((++ARGS_N))]}"
            ((COUNT_OPT++)) ;;
        -y|--y-long)
            ARG_Y="${ARGS[((++ARGS_N))]}"
            if [ -z "${ARGS[ARGS_N]}" ]; then
                FLAG_ARG_EMPTY='true'
                break
            fi
            ARG="${ARGS[((++ARGS_N))]}"
            ((COUNT_OPT++)) ;;
        # set help flag:
        -H|--help|-h)
            FLAG_HELP='true'
            break ;;
        # all single letter flag args:
        -[ABHh]*)
            # all single letter args:
            if [[ "${ARG:2:1}" =~ [ABxyHh] ]]; then
                ARGS[((ARGS_N--))]="-${ARG:2}"
                ARG="${ARG:0:2}"
            else
                ARG="${ARG:2:1}"
                FLAG_ARG_UNKNOWN='true'
                break
            fi ;;
        # all single letter option args:
        -[xy]*)
            ARGS[$ARGS_N]="${ARG:2}"
            ARG="${ARG:0:2}"
            ((ARGS_N--)) ;;
        # begin parms:
        --)
            ((ARGS_N++))
            break ;;
        *)
            break ;;
    esac; done
    # get parameters:
    while [ -n "${ARGS[ARGS_N]}" ]; do
        PARMS+=("${ARGS[((ARGS_N++))]}")
    done
    COUNT_PARM=${#PARMS[@]}
    # HELP:
    if [ "$FLAG_HELP" = 'true' ]; then
        print_help
        exit 0
    # FAIL: arg unknown:
    elif [ "$FLAG_ARG_UNKNOWN" = 'true' ]; then
        msg_error "option not recognized: $ARG"
        exit 5
    # FAIL: arg empty:
    elif [ "$FLAG_ARG_EMPTY" = 'true' ]; then
        msg_error "option requires an argument: $ARG"
        exit 5
    fi
}

msg() {
# print status message:
    printf '%s==>%s %s%s\n' "$C_GREEN_B" "$C_WHITE_B" "$1" "$C_GRAY"
}

msg_ask() {
# print ask message:
    printf '%s::%s %s%s ' "$C_BLUE_B" "$C_WHITE_B" "$1" "$C_GRAY"
}

msg_error() {
# print error message:
    printf '%s==> ERROR:%s %s%s\n' "$C_RED_B" "$C_WHITE_B" \
        "$1" "$C_GRAY"
}

msg_warn() {
# print warning message:
    printf '%s==> WARNING:%s %s%s\n' "$C_YELLOW_B" "$C_WHITE_B" \
        "$1" "$C_GRAY"
}

msg2() {
# print status sub-message:
    printf '%s  ->%s %s%s\n' "$C_BLUE_B" "$C_WHITE_B" "$1" "$C_GRAY"
}

print_value() {
# parse value of variable name $1 from file $2 or args after '--':
    local LINE REGEX REGEX1 REGEX2 TEXT VALUE VAR
    VAR="$1"
    REGEX='^ *'
    REGEX+="$VAR"
    REGEX1="$REGEX"+" *= *(\"|'|)(.*)(\1)"
    REGEX2="$REGEX"+" *\+= *(\"|'|)(.*)(\1)"
    if [ "$2" = '--' ] && [ -n "$3" ]; then
        shift; shift
        TEXT="$@"
    elif [ -n "$2" ] && [ -f "$2" ]; then
        TEXT="$(cat "$2")"
    else
        return 1
    fi
    while read LINE; do
        if [[ "$LINE" =~ $REGEX1 ]]; then
            VALUE="${BASH_REMATCH[2]}"
        elif [[ "$LINE" =~ $REGEX2 ]]; then
            VALUE+="${BASH_REMATCH[2]}"
        fi
    done < <(printf "$TEXT\n")
    printf "$VALUE\n"
}



##======================  ramroot_enable()  ======================##
# Generate new build and runtime hooks using local UUID of root partition.
# Copy new hooks to /usr/lib/initcpio.
# Add ext4, vfat, and zram to /etc/mkinitcpio.conf MODULES.
# Add ramroot to /etc/mkinitcpio.conf HOOKS.
# Rebuild linux cpio boot image.
ramroot_enable() {
    local FLAG_CHANGE='false'
    # check for user specified root UUID:
    if [ -n "$UUID_ROOT" ]; then
        printf ":: Using root UUID: $UUID_ROOT\n"
    else
        # FAIL: root not mounted:
        if (! mountpoint / >/dev/null 2>&1); then
            printf ":! Nothing mounted at /.\n"
            exit 1
        fi
        # try to get root UUID from lsblk:
        UUID_ROOT=`lsblk -n -o mountpoint,UUID | \
            grep -Po '(^| +)/ +\K[^ ]+'`
        # try to get root UUID from /etc/fstab:
        if [ -z "$UUID_ROOT" ] && [ -f /etc/fstab ]; then
            UUID_ROOT=`grep -Po 'UUID=\K[^ ]+(?= +/ )' /etc/fstab`
        fi
        # FAIL: unable to determine root UUID:
        if [ -z "$UUID_ROOT" ]; then
            printf ":! Unable to determine root UUID.\n"
            exit 1
        else
            printf ":: Detected root UUID: $UUID_ROOT\n"
        fi
    fi
    # check for user specified /boot UUID:
    if [ -n "$UUID_BOOT" ]; then
        printf ":: Using /boot UUID: $UUID_BOOT\n"
    else
        # check if /boot mounted:
        if (mountpoint /boot >/dev/null 2>&1); then
            # try to get /boot UUID from lsblk:
            UUID_BOOT=`lsblk -n -o mountpoint,UUID | \
                grep -Po '(^| +)/boot +\K[^ ]+'`
            # try to get /boot UUID from /etc/fstab:
            if [ -z "$UUID_BOOT" ] && [ -f /etc/fstab ]; then
                UUID_BOOT=`grep -Po 'UUID=\K[^ ]+(?= +/boot )' \
                    /etc/fstab`
            fi
        fi
        if [ -z "$UUID_BOOT" ]; then
            printf ":: No /boot UUID detected.\n"
        else
            printf ":: Detected /boot UUID: $UUID_BOOT\n"
        fi
    fi
    # check for hook files in local git repo:
    if [ -f "$DIR_SCRIPT/lib/hooks/ramroot" ]; then
        HOOK_RUNTIME="$DIR_SCRIPT/lib/hooks/ramroot"
    fi
    if [ -f "$DIR_SCRIPT/lib/install/ramroot" ]; then
        HOOK_BUILD="$DIR_SCRIPT/lib/install/ramroot"
    fi
    # FAIL: unable to find hook files:
    if [ ! -f "$HOOK_BUILD" ] || [ ! -f "$HOOK_RUNTIME" ]; then
        printf ":! Unable to locate hook files.\n"
        exit 1
    fi

    # copy build hook:
    mkdir -p install
    cp "$HOOK_BUILD" install/ramroot
    # make runtime hook:
    mkdir -p hooks
    sed "s@UUID_ROOT=.*@UUID_ROOT=\'$UUID_ROOT\'@g; \
        s@UUID_BOOT=.*@UUID_BOOT=\'$UUID_BOOT\'@g; \
        s@LOAD_DEFAULT=.*@LOAD_DEFAULT=\'$LOAD_DEFAULT\'@g; \
        s@LOAD_TIMEOUT=.*@LOAD_TIMEOUT=\'$LOAD_TIMEOUT\'@g;" \
        "$HOOK_RUNTIME" > hooks/ramroot
    # enable /etc/fstab:
    if [ "$FLAG_FSTAB" = 'true' ]; then
        sed -i "s@FLAG_FSTAB='false'@FLAG_FSTAB=\'true\'@g" \
            hooks/ramroot
    fi
    # enable custom /etc/issue:
    if [ "$FLAG_ISSUE" = 'true' ]; then
        sed -i "s@FLAG_ISSUE='false'@FLAG_ISSUE=\'true\'@g" \
            hooks/ramroot
    fi
    # incognito mode:
    if [ "$FLAG_INCOGNITO" = 'true' ]; then
        sed -i '73i\        echo -e "\\e[0;30m"; clear' hooks/ramroot
        sed -i '112i\        echo -e "\\033[H\\033[2J\\033[0;30m\\033[?1c" \\' \
            hooks/ramroot
        sed -i '113i\            > /zram_root/etc/issue' hooks/ramroot
    fi
    # FAIL: ramroot hooks not built:
    if [ ! -f hooks/ramroot ] || [ ! -f install/ramroot ]; then
        printf ":! ramroot hooks not built.\n"
        exit 1
    fi
    # check for hook changes:
    if (! diff -q install/ramroot "$DIR_INSTALL/ramroot" >/dev/null 2>&1) ||
    (! diff -q hooks/ramroot "$DIR_HOOKS/ramroot" >/dev/null 2>&1); then
        FLAG_CHANGE='true'
    fi

    # add zram to INIT_MODULES:
    if [[ ! "$INIT_MODULES" =~ zram ]]; then
        if [ -z "$INIT_MODULES" ]; then
            INIT_MODULES='zram'
        else
            INIT_MODULES="${INIT_MODULES} zram"
        fi
        printf ":: zram added to mkinitcpio.conf MODULES\n"
        FLAG_CHANGE='true'
    fi
    # add ext4 to INIT_MODULES:
    if [[ ! "$INIT_MODULES" =~ ext4 ]]; then
        INIT_MODULES="${INIT_MODULES} ext4"
        printf ":: ext4 added to mkinitcpio.conf MODULES\n"
        FLAG_CHANGE='true'
    fi
    # add vfat to INIT_MODULES:
    if [[ ! "$INIT_MODULES" =~ vfat ]]; then
        INIT_MODULES="${INIT_MODULES} vfat"
        printf ":: vfat added to mkinitcpio.conf MODULES\n"
        FLAG_CHANGE='true'
    fi
    # add ramroot to INIT_HOOKS:
    if [[ ! "$INIT_HOOKS" =~ ramroot ]]; then
        if [[ "$INIT_HOOKS" =~ encrypt ]]; then
            INIT_HOOKS="${INIT_HOOKS%encrypt*}encrypt ramroot${INIT_HOOKS#*encrypt}"
        elif [[ "$INIT_HOOKS" =~ udev ]]; then
            INIT_HOOKS="${INIT_HOOKS%udev*}udev ramroot${INIT_HOOKS#*udev}"
        else
            INIT_HOOKS="${INIT_HOOKS%base*}base ramroot${INIT_HOOKS#*base}"
        fi
        printf ":: ramroot added to mkinitcpio.conf HOOKS\n"
        FLAG_CHANGE='true'
    fi

    # if changes need to be made:
    if [ "$FLAG_CHANGE" = 'true' ] || [ "$FLAG_DRYRUN" = 'true' ]; then
        # build new mkinitcpio.conf:
        sed "s@^MODULES=.*@MODULES=($INIT_MODULES)@g; \
            s@^HOOKS=.*@HOOKS=($INIT_HOOKS)@g;" \
            /etc/mkinitcpio.conf > mkinitcpio.conf
        # FAIL: mkinitcpio.conf not built:
        if [ ! -f mkinitcpio.conf ]; then
            printf ":! mkinitcpio.conf not built.\n"
            exit 1
        fi
        # keep build files in cache:
        ramroot_cache
        if [ "$FLAG_DRYRUN" = 'false' ]; then
            # copy mkinitcpio.conf to /etc and hooks to /usr/lib/initcpio:
            printf ":: Enabling ramroot...\n"
            sudo cp hooks/ramroot "$DIR_HOOKS/ramroot" &&
            sudo cp install/ramroot "$DIR_INSTALL/ramroot" &&
            sudo cp mkinitcpio.conf /etc/mkinitcpio.conf &&
            sudo mkinitcpio -p linux &&
            printf ":: ramroot enabled.\n"
        else
            printf ":: ramroot enable dryrun successful.\n"
        fi
    else
        printf ":: ramroot already enabled.\n"
    fi

    return 0
}

##=====================  ramroot_disable()  ======================##
# Remove ext4 and zram from /etc/mkinitcpio.conf MODULES.
# Remove ramroot from /etc/mkinitcpio.conf HOOKS.
# Rebuild linux cpio boot image.
ramroot_disable() {
    local FLAG_CHANGE='false'
    # remove zram from INIT_MODULES:
    if [[ "$INIT_MODULES" =~ zram ]]; then
        INIT_MODULES=`echo "$INIT_MODULES" | \
            sed -r 's/( zram|zram |zram)//g'`
        printf ":: zram removed from mkinitcpio.conf MODULES\n"
        FLAG_CHANGE='true'
    fi
    # remove ext4 from INIT_MODULES:
    if [[ "$INIT_MODULES" =~ ext4 ]]; then
        INIT_MODULES=`echo "$INIT_MODULES" | \
            sed -r 's/( ext4|ext4 |ext4)//g'`
        printf ":: ext4 removed from mkinitcpio.conf MODULES\n"
        FLAG_CHANGE='true'
    fi
    # remove vfat from INIT_MODULES:
    if [[ "$INIT_MODULES" =~ vfat ]]; then
        INIT_MODULES=`echo "$INIT_MODULES" | \
            sed -r 's/( vfat|vfat |vfat)//g'`
        printf ":: vfat removed from mkinitcpio.conf MODULES\n"
        FLAG_CHANGE='true'
    fi
    # remove ramroot from INIT_HOOKS:
    if [[ "$INIT_HOOKS" =~ ramroot ]]; then
        INIT_HOOKS=`echo "$INIT_HOOKS" | \
            sed -r 's/( ramroot|ramroot |ramroot)//g'`
        printf ":: ramroot removed from mkinitcpio.conf HOOKS\n"
        FLAG_CHANGE='true'
    fi

    # if changes need to be made:
    if [ "$FLAG_CHANGE" = 'true' ] || [ "$FLAG_DRYRUN" = 'true' ]; then
        # keep copy of old mkinitcpio.conf:
        if [ "$FLAG_CACHE" = 'true' ]; then
            mkdir -p "$DIR_CACHE"
            cp /etc/mkinitcpio.conf "$DIR_CACHE/mkinitcpio~.conf"
        fi
        # build new mkinitcpio.conf:
        sed "s@^MODULES=.*@MODULES=($INIT_MODULES)@g; \
            s@^HOOKS=.*@HOOKS=($INIT_HOOKS)@g;" \
            /etc/mkinitcpio.conf > mkinitcpio.conf
        # FAIL: mkinitcpio.conf not built:
        if [ ! -f mkinitcpio.conf ]; then
            printf ":! mkinitcpio.conf not built.\n"
            exit 1
        fi
        # keep build files in cache:
        ramroot_cache
        # copy mkinitcpio.conf to /etc and rebuild linux cpio image:
        if [ "$FLAG_DRYRUN" = 'false' ]; then
            printf ":: Disabling ramroot...\n"
            sudo cp mkinitcpio.conf /etc/mkinitcpio.conf &&
            sudo mkinitcpio -p linux &&
            printf ":: ramroot disabled.\n"
        else
            printf ":: ramroot disable dryrun successful.\n"
        fi
    fi

    return 0
}

##======================  ramroot_remove()  ======================##
# Remove ramroot hooks from /usr/lib/initcpio.
ramroot_remove() {
    # check for installed hooks:
    if [ -f /usr/lib/initcpio/hooks/ramroot ] ||
    [ -f /usr/lib/initcpio/install/ramroot ] ||
    [ "$FLAG_DRYRUN" = 'true' ]; then
        # keep copy of old hooks:
        if [ "$FLAG_CACHE" = 'true' ]; then
            if [ -f /usr/lib/initcpio/hooks/ramroot ]; then
                mkdir -p "$DIR_CACHE/hooks"
                cp /usr/lib/initcpio/hooks/ramroot \
                    "$DIR_CACHE/hooks/ramroot"
            fi
            if [ -f /usr/lib/initcpio/install/ramroot ]; then
                mkdir -p "$DIR_CACHE/install"
                cp /usr/lib/initcpio/install/ramroot \
                    "$DIR_CACHE/install/ramroot"
            fi
        fi
        # remove ramroot hooks:
        if [ "$FLAG_DRYRUN" = 'false' ]; then
            printf ":: Removing ramroot hooks...\n"
            if [ -f /usr/lib/initcpio/hooks/ramroot ]; then
                sudo rm /usr/lib/initcpio/hooks/ramroot
            fi
            if [ -f /usr/lib/initcpio/install/ramroot ]; then
                sudo rm /usr/lib/initcpio/install/ramroot
            fi
        else
            printf ":: ramroot remove dryrun successful.\n"
        fi
    fi

    return 0
}

##======================  ramroot_status()  ======================##
# Print ramroot installation status to screen.
ramroot_status() {
    # print root filesystem status:
    root_stat() {
        if (lsblk | grep -P 'zram.*?/ ?$' >/dev/null); then
            printf ":: root filesystem loaded to RAM\n"
        else
            printf ":: root filesystem not loaded to RAM\n"
            EXIT_STATUS=1
        fi
    }
    if [[ "$INIT_MODULES" =~ zram ]] &&
    [[ "$INIT_MODULES" =~ ext4 ]] &&
    [[ "$INIT_MODULES" =~ vfat ]] &&
    [[ "$INIT_HOOKS" =~ ramroot ]] &&
    [ -f /usr/lib/initcpio/hooks/ramroot ] &&
    [ -f /usr/lib/initcpio/install/ramroot ]; then
        printf ":: ramroot status: enabled\n"
        root_stat
    else
        printf ":: ramroot disabled\n"
        root_stat
        EXIT_STATUS=2
    fi

    return 0
}

##======================  helper functions  ======================##
ramroot_cache() {
    if [ "$FLAG_CACHE" = 'true' ]; then
        mkdir -p "$DIR_CACHE"
        cd "$DIR_CACHE"
        cp -r "$DIR_BUILD"/* .
        cd "$DIR_BUILD"
    fi

    return 0
}


##=============================  SCRIPT  =============================##





# parse command line arguments:
for arg in "$@"; do case $arg in
    disable)         ACTION='disable';          shift;;
    enable)          ACTION='enable';           shift;;
    remove)          ACTION='remove';           shift;;
    status)          ACTION='status';           shift;;
    -b|--boot)       shift; UUID_BOOT="$1";     shift;;
    -D|--dryrun)     FLAG_DRYRUN='true';        shift;;
    -F|--fstab)      FLAG_FSTAB='true';         shift;;
    -H|-h|--help)    ACTION='help';             shift;;
    -I|--incognito)  FLAG_INCOGNITO='true';     shift;;
    -K|--keep)       FLAG_CACHE='true';         shift;;
    -M|--message)    FLAG_ISSUE='true';         shift;;
    -N|--no)         LOAD_DEFAULT='no';         shift;;
    -r|--root)       shift; UUID_ROOT="$1";     shift;;
    -t|--timeout)    shift; LOAD_TIMEOUT="$1";  shift;;
esac; done

# print help:
if [ "$ACTION" = 'help' ]; then
    print_help
    exit 0
fi

# FAIL: unrecognized option:
if [ -n "$1" ]; then
    printf ":! Unrecognized option: $1\n"
    exit 1
fi

# FAIL: no action specified:
if [ "$ACTION" = 'none' ]; then
    printf ":! No action specified.  See --help\n"
    exit 1
fi

# WARN: invalid prompt timeout:
if [[ ! "$LOAD_TIMEOUT" =~ ^[1-9][0-9]*$ ]]; then
    printf ":! Invalid prompt timeout: $LOAD_TIMEOUT\n"
    printf ":: Using default timeout: $LOAD_TIMEOUT_DEFAULT\n"
    LOAD_TIMEOUT=$LOAD_TIMEOUT_DEFAULT
fi

# prepare build:
mkdir -p "$DIR_BUILD"
cd "$DIR_BUILD"
sudo -k

# get current MODULES and HOOKS from /etc/mkinitcpio.conf:
INIT_MODULES="`grep -Po '^ *MODULES=(\(|")\K.*?(?=(\)|"))' \
    /etc/mkinitcpio.conf`"
INIT_HOOKS="`grep -Po '^ *HOOKS=(\(|")\K.*?(?=(\)|"))' \
    /etc/mkinitcpio.conf`"

# execute action:
if [ "$ACTION" = 'enable' ]; then
    ramroot_enable
elif [ "$ACTION" = 'disable' ]; then
    ramroot_disable
elif [ "$ACTION" = 'remove' ]; then
    ramroot_disable
    ramroot_remove
elif [ "$ACTION" = 'status' ]; then
    ramroot_status
fi

# remove build files:
cd ..
rm -Rd "$DIR_BUILD"

exit $EXIT_STATUS
