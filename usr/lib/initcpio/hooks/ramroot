#!usr/bin/ash

run_hook() {
    local mount_root mounts_null mounts_zram ps_default ps_timeout ram \
        ram_min ram_pref zram zram_max zram_min mount_id mount_path
    #global fsck_root mount_handler zram_device zram_mount

    msg_debug() {
        for mount in $root:/ $mounts_zram; do
            printf '] mount_zram= %s\n' "$mount"
        done
        for mount in $mounts_null; do
            printf '] mount_null= %s\n' "$mount"
        done
        printf '] ps_default= %s\n' "$ps_default"
        printf '] ps_timeout= %s\n' "$ps_timeout"
        printf '] ram=        %s\n' "$ram"
        printf '] ram_min=    %s\n' "$ram_min"
        printf '] ram_pref=   %s\n' "$ram_pref"
        printf '] zram=       %s\n' "$zram"
        printf '] zram_min=   %s\n' "$zram_min"
        printf '] zram_max=   %s\n\n' "$zram_max"
    }

    size_to_bytes() {
        local bytes input lhs rhs suffix
        input="$1"
        if (echo "$input" | \
        grep -Ei '^[0-9]*(\.[0-9]*)?$' &>/dev/null); then
            lhs="${input%.*}"; lhs="${lhs:-0}"
            bytes="$(echo "$lhs" | sed 's/^0*//')"
        elif (echo "$input" | \
        grep -Ei '^[0-9]*(\.[0-9]*)?[TGMK]$' &>/dev/null); then
            suffix="${input: -1}"
            input="${input:0:-1}"
            lhs="${input%.*}"; lhs="${lhs:-0}"
            rhs="${input#*.}"; rhs="${rhs:-0}"
            [ "$lhs" = "$rhs" ] && rhs=
            if [ "$suffix" = 'T' ] || [ "$suffix" = 't' ]; then
                lhs=$((lhs*1000000000000))
                rhs="$(printf '%-12s' "$rhs")"
            elif [ "$suffix" = 'G' ] || [ "$suffix" = 'g' ]; then
                lhs=$((lhs*1000000000))
                rhs="$(printf '%-9s' "$rhs")"
            elif [ "$suffix" = 'M' ] || [ "$suffix" = 'm' ]; then
                lhs=$((lhs*1000000))
                rhs="$(printf '%-6s' "$rhs")"
            elif [ "$suffix" = 'K' ] || [ "$suffix" = 'k' ]; then
                lhs=$((lhs*1000))
                rhs="$(printf '%-3s' "$rhs")"
            fi
            rhs="$(echo "${rhs// /0}" | sed 's/^0*//')"
            bytes=$((lhs+rhs))
        fi
        if [ $bytes -gt 0 ]; then
            printf '%d' $bytes
        fi
    }

    # wait a moment for udev to initialize:
    printf '==> loading ramroot .'; sleep 1
    printf '.'; sleep 1
    printf '.\n'; sleep 1

    # source config, set defaults:
    source /etc/ramroot.conf
    if (echo "$ps_default" | grep -Ei '^(y|yes)$' &>/dev/null); then
        ps_default='yes'
    else
        ps_default='no'
    fi
    if (! echo "$ps_timeout" | grep -Ei \
    '^[1-9]+[0-9]*$' &>/dev/null); then
        ps_timeout=5
    fi
    ram_min="$(size_to_bytes "$ram_min")"
    if [ ! -n "$ram_min" ]; then
        ram_min="$(size_to_bytes 750M)"
    fi
    ram_pref="$(size_to_bytes "$ram_pref")"
    if [ ! -n "$ram_pref" ]; then
        ram_pref="$(size_to_bytes 4G)"
    fi
    zram_min="$(size_to_bytes "$zram_min")"
    if [ ! -n "$zram_min" ]; then
        zram_min="$(size_to_bytes 250M)"
    fi
    zram_max="$(size_to_bytes "$zram_max")"
    if [ ! -n "$zram_max" ]; then
        zram_max="$(size_to_bytes 1G)"
    fi
    if [ $ram_min -gt $ram_pref ]; then
        ram_pref=$ram_min
    fi
    if [ $zram_min -gt $zram_max ]; then
        zram_min=$zram_max
    fi
    # get available ram:
    ram="$(free | awk '/Mem/ {print int($2)}')000"

    # get zram size:
    for mount in $root:/ $mounts_zram; do
        mount_id="$(resolve_device "${mount%:*}")"
        poll_device "$mount_id" 20
        mount "$mount_id" /local_root
        # FAIL: unable to mount:
        if [ $? -ne 0 ]; then
            printf '==> ramroot FAILED: unable to mount: %s\n' \
                "${mount%:*}"
            return 1
        fi
        zram=$((zram + $(df /local_root/ | \
            awk 'FNR==2 {print int($3)}') * 1000))
        umount /local_root
    done

    # WARM: not enough ram
    if [ $((ram-ram_min-zram-zram_min)) -le 0 ]; then
        printf '==> ramroot SKIPPED: not enough ram\n'
        return 0
    # calculate zram size:
    elif [ $((ram-ram_pref-zram-zram_min)) -gt 0 ]; then
        if [ $((ram-ram_pref-zram-zram_max)) -gt 0 ]; then
            zram=$((zram+zram_max))
        else
            zram=$((ram-ram_pref))
        fi
    else
        zram=$((zram+zram_min))
    fi
    ram=$((ram-zram))

    



    busybox ash
    return 0
    
    # make zram device:
    if [ ! -b "/dev/zram0" ]; then
        modprobe zram
    fi
    zram_device=$(zramctl -f -s $zram -a lzo)
    mkfs.ext4 -q "$zram_device"
    mount "$zram_device" /zram_root

    

    # copy root:

    # mount zram partition to /zram_root:
    mount "$ZRAM_DEVICE" /zram_root
    export ZRAM_DEVICE
    # copy files from local root to zram root:
    cp -a /local_root/* /zram_root/

    # unmount zRAM root:
    umount /zram_root

    # set new mount_handler to use zRAM device:
    zram_mount() {
        mount "$ZRAM_DEVICE" "$1"
    }
    # skip zRAM filesystem check:
    fsck_root() {
        :
    }
    mount_handler=zram_mount
    export flag_anon flag_quiet zram_device


    # unmount /local_root and /local_boot:
    umount /local_root
    if [ -n "$UUID_BOOT" ]; then
        umount /local_boot
    fi
}

