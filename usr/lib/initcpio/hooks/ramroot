#!usr/bin/ash

run_hook() {
    local flag_tmp mount mount_id mount_path mounts_null mounts_tmp \
        mounts_zram mount_tmp mount_tmp ps_default ps_input ps_timeout \
        ram ram_min ram_pref zram zram_max zram_min
    #global fsck_root mount_handler root zram_device zram_mount

    # wait a moment for udev to hopefully finish initializing:
    sleep 2
    source /etc/ramroot.conf

    # set mounts:
    for mount in $root:/ $mounts_zram; do
        flag_tmp=true
        for mount_tmp in $mounts_null; do
            if [ "$mount" = "$mount_tmp" ] || \
            [ "${mount#*:}" = "$mount_tmp" ]; then
                flag_tmp=false
            fi
        done
        for mount_tmp in $mounts_tmp; do
            if [ "$mount" = "$mount_tmp" ] || \
            [ "${mount#*:}" = "$mount_tmp" ]; then
                flag_tmp=false
            fi
        done
        if [ "$flag_tmp" = 'true' ]; then
            mounts_tmp="$mounts_tmp$mount "
        fi
    done
    mounts_zram="$mounts_tmp"
    # RETURN: root in mounts_null:
    if [ "${mounts_zram%% *}" != "$root:/" ]; then
        return 0
    fi
    # FAIL: mount not found:
    for mount in $mounts_zram; do
        mount_id="$(resolve_device "${mount%:*}")"
        mount_path="${mount#*:}"
        if [ "$mount_id" = "$mount_path" ] || \
        [ -z "$mount_id" ] || [ -z "$mount_path" ]; then
            printf '\e[1;31m==> FAILED: \e[1;37m%s %s\e[0;37m\n' \
                'ramroot mount not found:' "$mount"
            sleep 2
            return 1
        fi
    done

    # set prompt:
    if (echo "$ps_default" | grep -Ei '^(y|yes)$' &>/dev/null); then
        ps_default='yes'
    else
        ps_default='no'
    fi
    if (! echo "$ps_timeout" | grep -Ei \
    '^[1-9]+[0-9]*$' &>/dev/null); then
        ps_timeout=5
    fi

    # set sizes:
    if (! echo "$ram_min" | grep -E '^[1-9][0-9]*$' &>/dev/null); then
        ram_min=750
    fi
    if (! echo "$ram_pref" | grep -E '^[1-9][0-9]*$' &>/dev/null); then
        ram_pref=4000
    fi
    if (! echo "$zram_min" | grep -E '^[1-9][0-9]*$' &>/dev/null); then
        zram_min=250
    fi
    if (! echo "$zram_max" | grep -E '^[1-9][0-9]*$' &>/dev/null); then
        zram_max=1000
    fi
    if [ $ram_min -ge $ram_pref ]; then
        ram_pref=$ram_min
    fi
    if [ $zram_min -ge $zram_max ]; then
        zram_min=$zram_max
    fi

    # get available ram:
    ram="$(($(free | awk '/Mem/ {print int($2)}')/1000))"

    # get zram size:
    for mount in $mounts_zram; do
        sleep 1
        mount_id="$(resolve_device "${mount%:*}")"
        mount_path="${mount#*:}"
        poll_device "$mount_id" 20
        mount "$mount_id" /local_root
        # FAIL: unable to mount:
        if [ $? -ne 0 ]; then
            printf '\e[1;31m==> FAILED: \e[1;37m%s %s\e[0;37m\n' \
                'ramroot unable to mount:' "${mount%:*}"
            sleep 2
            return 1
        fi
        zram=$((zram+$(df /local_root/ | \
            awk 'FNR==2 {print int($3)}')/1000))
        umount /local_root
    done

    # WARM: not enough ram
    if [ $((ram-ram_min-zram-zram_min)) -le 0 ]; then
        printf '\e[1;33m==> SKIPPED: \e[1;37m%s\e[0;37m\n' \
            'ramroot: not enough ram'
        sleep 2
        return 0
    # calculate zram size:
    elif [ $((ram-ram_pref-zram-zram_min)) -gt 0 ]; then
        if [ $((ram-ram_pref-zram-zram_max)) -gt 0 ]; then
            zram=$((zram+zram_max))
        else
            zram=$((ram-ram_pref))
        fi
    else
        zram=$((zram+zram_min))
    fi
    ram=$((ram-zram))

    # prompt for input:
    printf '\e[1;34m:: \e[1;37mLoad root file system to zram? '
    if [ "$ps_default" = 'yes' ]; then
        printf '[Y/n] \e[0;37m'
    else
        printf '[y/N] \e[0;37m'
    fi
    read -r -t $ps_timeout ps_input
    if [ $? -ne 0 ]; then
        printf '\n'
    fi
    ps_input="$(echo "${ps_input:=$ps_default}" | \
        awk '{print tolower($0)}')"
    if  [ "$ps_input" != 'y' ] && [ "$ps_input" != 'yes' ]; then
        return 0
    fi
    if [ "$flag_quiet" = 'true' ]; then
        printf '\e[0;30m'; clear
    fi

    # make zram device:
    if [ ! -b "/dev/zram0" ]; then
        modprobe zram
    fi
    zram_device=$(zramctl -f -s ${zram}M -a lzo)
    mkfs.ext4 -q "$zram_device"
    mount "$zram_device" /zram_root

    # copy root to zram:
    for mount in $mounts_zram; do
        sleep 1
        mount_id="$(resolve_device "${mount%:*}")"
        mount_path="${mount#*:}"
        mount "$mount_id" /local_root
        mkdir -p "/zram_root$mount_path"
        if [ "$flag_quiet" != 'true' ]; then
            printf '\e[1;32m==> \e[1;37mLoading %s %s\e[0;37m\n' \
                "$mount_path" 'to zram...'
        fi
        cp -a /local_root/* "/zram_root$mount_path"
        umount /local_root
    done

    # modify /etc/fstab:
    if [ -f /zram_root/etc/fstab ]; then
        for mount in $mounts_zram; do
            mount_path="${mount#*:}"
            sed -Ei "s|^(\s*[^\s]+\s+${mount_path}\s+.*)$|#\1|g;" \
                /zram_root/etc/fstab
        done
        for mount in $mounts_null; do
            mount_path="${mount#*:}"
            sed -Ei -e "s|^(\s*[^\s]+\s+${mount_path}\s+.*)$|#\1|g;" \
                -e "s|^(\s*${mount_path}/[^\s]+\s+.*)$|#\1|g;" \
                /zram_root/etc/fstab
        done
    fi

    # copy ramroot files:
    if [ -d /zram_root/etc/ramroot ]; then
        cp -a /zram_root/etc/ramroot/* /zram_root
    fi
    if [ "$flag_quiet" = 'true' ]; then
        printf "\\033[H\\033[2J\\033[0;30m\\033[?1c\n" > \
            /zram_root/etc/issue
    fi

    # unmount zram device:
    umount /zram_root

    # set new mount_handler:
    zram_mount() {
        mount "$zram_device" "$1"
    }
    fsck_root() {
        :
    }
    mount_handler=zram_mount
    export zram_device
}
